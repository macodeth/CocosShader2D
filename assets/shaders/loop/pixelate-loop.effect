// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        amount1: { value: -1.0, editor: {range: [-1.0, 20.0, 1.0], slide: true}}
        amount2: { value: 15.0, editor: {range: [-1.0, 20.0, 1.0], slide: true}}
        width: { value: 115.0 }
        height: { value: 98.8 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;


    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <cc-global>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
  #endif

  uniform DATA{
    float amount1;
    float amount2;
    float width;
    float height;
  };

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      float t = (sin(cc_time.x * 0.5) + 1.0) / 2.0;
      float amount = mix(amount1, amount2, t);
      float pixelSize = floor(2.0 + amount);
      vec2 resolution = vec2(width, height);
      vec2 center = pixelSize * floor(uv0 * resolution / pixelSize) + pixelSize * vec2(0.5, 0.5);
      vec2 corner1 = center + pixelSize * vec2(-0.5, -0.5);
      vec2 corner2 = center + pixelSize * vec2(+0.5, -0.5);
      vec2 corner3 = center + pixelSize * vec2(+0.5, +0.5);
      vec2 corner4 = center + pixelSize * vec2(-0.5, +0.5);
      vec4 pixel = 0.4 * CCSampleWithAlphaSeparated(cc_spriteTexture, center / resolution);
      pixel += 0.15 * CCSampleWithAlphaSeparated(cc_spriteTexture, corner1 / resolution);
      pixel += 0.15 * CCSampleWithAlphaSeparated(cc_spriteTexture, corner2 / resolution);
      pixel += 0.15 * CCSampleWithAlphaSeparated(cc_spriteTexture, corner3 / resolution);
      pixel += 0.15 * CCSampleWithAlphaSeparated(cc_spriteTexture, corner4 / resolution);

      if (amount > 0.0)
        o *= pixel;
      else
        o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);

      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    o *= color;
    ALPHA_TEST(o);
    return o;
  }
}%
