// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        scale: { value: 0.9 }
        line_color: { value: [1.0, 1.0, 1.0, 1.0], editor: {type: color}}
        line_thickness: { value: 1.0, editor: {range: [0.0, 0.2, 0.01], slide: true}}
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;


  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <common-define>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
  #endif

  uniform DATA{
    vec4 line_color;
    float scale;
    float line_thickness;
  };

  float clamp01 (vec2 k) {
    return step(0.0, k.x) * step(k.x, 1.0) * step(0.0, k.y) * step(k.y, 1.0);
  }

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      vec2 uv = (uv0 - 0.5) / scale + 0.5;
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv) * clamp01(uv);

      float outline = 0.0;
      const float steps = 20.0;
      float theta = PI2 / steps;
      for (float i = 0.0; i < steps; i += 1.0) {
        float angle = i * theta;
        vec2 uv_angle = uv + line_thickness * vec2(sin(angle), cos(angle));
        outline += CCSampleWithAlphaSeparated(cc_spriteTexture, uv_angle).a * clamp01(uv_angle);
      }
      outline = min(outline, 1.0);

      if (line_thickness > 0.0)
        o = mix(o, line_color, outline - o.a);  

      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    o *= color;
    ALPHA_TEST(o);
    return o;
  }
}%
